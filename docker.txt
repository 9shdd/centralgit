docker is an open source centralized platform designed to create deploy and run applications.
we can install docker on any OS but it runs natively on linux distribution.
docker written in 'go' language.
docker tool that performs os level virtualization while vm hardware level.
docker also known as containerization
docker is set of 'paas' service.
Advantages: no pre allocation of RAM
            less cost
            it is light in weight
            
NOTE: when image is runs called container
DockerHub/Rejistery: docker rejistery manage and sores the docker images.
there are 2 types of rejistery 1 is private(used to share images within enterprise), 2 is public(also called as docker hub).
Docker images: docker images are read only binary templates used to create docker container OR single file with all dependencies.
THERE ARE 3 WAYS TO CREATE AN IMAGES: take images from docker hub
                                      create image from docker file
                                      create image from existing docker container
Docker container: container hold the entire packages related to run the application
                  in simple word container is like a virtual machine
                  image becomes container when image runs on docker engine
COMMANDS.........
# docekr version               To see docker version like 24.0.5
# docker images                 To see all present images in machine
# docker search 'image-name'    To see any images is present or not on docker hub 
# docker pull 'image -name'     To download any image in local machine from docker hub
# docker run -it --name 'give-contnr-name' 'image-name' /bin/bash  To give contnr custom name
# service docker status        To see/check docker service is start or not, also #docker info
# docker start 'contnr-name'   TO start the contnr
# docker attach 'contnr-name'  To go inside the contnr make sure first start the contnr
# docker ps -a                 To see all contnr including running and stop
# docker ps                    To see only running contnrs
# docker stop 'contnr-name'    To stop contnr
# docker rm 'contnr-name'      To delete contnr make sure contnr is stoped 
Dockerfile & it's components.............
Q. what is docker file - docker file is a text file which contains some set of instructions.
Components... make sure all components name must be written in only CAPITAL letter
FROM - for base image this cmnd/cmpont must be written on top of the file
RUN - to execute any command, it will create a layer in image
CMD - execute commands but during contnr creation
ENTRYPOINT - similar to CMD but it has higher priority first commands will be executed by entrypoint
MAINTAINER- description/author-name/Owner-name
COPY - copy files from local/base system, source and destination is needed
ADD - similar to COPY but it provides a feature to dowlnload files from internet, we can also extract file at docker image side
EXPOSE - TO expose any ports like jenkins 8080
WORKDIR -  TO set any working directory for a contnr
VOLUME - it is like a dir define when contnr creating, share it to with contnr to contrn and host to host
ENV - Environment variables eg. pm = modi
Now let's create one Docker file with the named Dockerfile(first letter of files must be Caps always)
1. create a file named Dockerfile
2. add instructions in dockerfile
3. use command # docker bulid -t 'image-name' to build an image from the dockerfile
4. run image to create contnr
# vi Dockerfile 
From ubuntu 
WORKDIR /tmp
RUN echo 'creted docker file' > /tmp/testfile
ENV myname noshad
COPY newtestfile /tmp
ADD test.tar.gz /tmp
Now run the command # docker build -t give-'image-name' .

2. How to create new image by existing contnr 
First create 1 container # docker run -it --name dockerfilecontnr 'image-name' /bin/bash
Then create 1 file insode temp dir # touch /tmp/ myfile
Now if you want to see the difference b/w base image & chages what you did 
# docker diff 'contnr-name' 'image-name'
Now create 1 image of this contnr # docker commit 'contnr-name' 'image-name'
Then check created image # docker images
Now create 1 contnr from this created image by existing contnr
# docker run -it --name 'contnr-name' 'image-name' /bin/bash
Goto the tmp dir and check 'myfile' file # cd /tmp/

Docker volume & how to share it between containers
What is volume - Volume is a simple directory in contnr
1st we have to declare dir as a volume while we creating a contnr then we can share the volume
you can not create a volume from existing contnr
Even, if we stop the contnr, still we can access the volume/dir
we can volume in 2 ways contr-to-contnr & host-to contnr
Step........
# vi Dockerfile
FROM ubuntu 
VOLUME ["/myvoulme"]
:wq!
then create an image from this created  dockerfile # docker build -t 'give-image-name'
now create a contnr from this created image # docker run -it --name 'give-contnr-name' 'image-name' /bin/bash
run # ls and check volume/dir is available or not
Now share this volume with another contnr
run # docker run --it --name 'give-old-contnr-name' --priviged=true --volumes-from 'give-new-contnr-name' ubuntu /bin/bash
now run and check volume is available or not # ls 
and create 1 files and then go to in previus contnr and check file is available or not

Now try create volume by using command
# docker run -it --name volumeimage -v /volume ubuntu /bin/bash
then share this volume with another contnrs

Now try to share volimes host-contnr
create any dir in host machine
# docker run -it --name hostcontnr -v '/home/ec2-user:/sharedir' --privileged=true 'give-image-name' /bin/bash
then check the dir in created contnr and create any files and then check it in host machine

some other commands.......
# docker volume ls  To see the created volume list
# docker volume create 'volume-name'  To create volume in local machine
# docker volume rm  To remove creted dcoker volume
# docker volume prune  To remove all unused docker volume 
# docker volume inspect 'volume-name'  To inspect volume details
# docker container inspect 'contnr-name'  To check contnr details
# docker stop $(docker ps -a q)  To stop all running contnr
# docker rm $(docker ps -a -q)  To delete all stopped contnrs
# docker rmi -f (docker images -q)  To delete all images

Docker port expose.....
1 create and run container at a time
# docekr run -td --name 'give-contnr-name' -p 80:80 ubuntu 
# docker ps   To check running contnr
# docker port 'contnr-name'  To check expose port
# docker exec -it 'contnr-name' /bin/bash   To enter in the contnr with a new process with exec cmnds
OR # docker attach 'contnr-name'
Go to this path # cd /var/www/html
echo 'this is a port expose server with host to contnr' >index.html

How to push docker images on docker hub....
1 create the image form the crated contnr
# docker commit 'creted-contnr-name' 'give-image-name'
2 give the tag to the images # docker tag 'give-any-name' dockerid/image1(just-name)
3 # docker push imageid/image1
4 # docker pull imageid/image1 
5 run this image and create the contnr # docker run -it --name pullimage 'image-name' /bin/bash

